import { int, str, uint64 } from "../../chia/types/_python_types_";
import { bytes32 } from "../../chia/types/blockchain_format/sized_bytes";
import { TRPCAgent } from "../../../rpc/index";
export declare const chia_crawler_service = "chia_crawler";
export declare type chia_crawler_service = typeof chia_crawler_service;
export declare const get_peer_counts_command = "get_peer_counts";
export declare type get_peer_counts_command = typeof get_peer_counts_command;
export declare type TGetPeerCountsResponse = {
    peer_counts: {
        total_last_5_days: int;
        reliable_nodes: int;
        ipv4_last_5_days: bytes32;
        ipv6_last_5_days: uint64;
        versions: Record<str, int>;
    };
};
export declare function get_peer_counts(agent: TRPCAgent): Promise<TGetPeerCountsResponse | import("../../../rpc/index").ErrorResponse>;
export declare const get_ips_after_timestamp_command = "get_ips_after_timestamp";
export declare type get_ips_after_timestamp_command = typeof get_ips_after_timestamp_command;
export declare type TGetIpsAfterTimestampRequest = {
    after: int;
    offset?: int;
    limit?: int;
};
export declare type TGetIpsAfterTimestampResponse = {
    ips: str[];
    total: int;
};
export declare function get_ips_after_timestamp(agent: TRPCAgent, params: TGetIpsAfterTimestampRequest): Promise<TGetIpsAfterTimestampResponse | import("../../../rpc/index").ErrorResponse>;
