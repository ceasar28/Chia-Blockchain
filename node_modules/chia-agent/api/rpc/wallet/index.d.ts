import { WalletInfo } from "../../chia/wallet/wallet_info";
import { Coin } from "../../chia/types/blockchain_format/coin";
import { bool, bytes, False, int, Optional, str, True, uint128, uint16, uint32, uint64, uint8 } from "../../chia/types/_python_types_";
import { bytes32 } from "../../chia/types/blockchain_format/sized_bytes";
import { TransactionRecord, TransactionRecordConvenience } from "../../chia/wallet/transaction_record";
import { SpendBundle } from "../../chia/types/spend_bundle";
import { TRPCAgent } from "../../../rpc";
import { PoolWalletInfo } from "../../chia/pools/pool_wallet_info";
import { TradeRecordConvenience } from "../../chia/wallet/trade_record";
import { CAT } from "../../chia/wallet/cat_wallet/cat_constants";
import { TDriverDict } from "../../chia/wallet/puzzle_drivers";
import { NFTInfo } from "../../chia/wallet/nft_wallet/nft_info";
import { Mirror, SingletonRecord } from "../../chia/data_layer/data_layer_wallet";
export declare const chia_wallet_service = "chia_wallet";
export declare type chia_wallet_service = typeof chia_wallet_service;
export declare const log_in_command = "log_in";
export declare type log_in_command = typeof log_in_command;
export declare type TLoginRequest = {
    fingerprint: int;
};
export declare type TLoginResponse = {
    fingerprint: int;
} | {
    success: False;
    error: "Unknown Error";
};
export declare function log_in(agent: TRPCAgent, data: TLoginRequest): Promise<TLoginResponse | import("../../../rpc").ErrorResponse>;
export declare const get_logged_in_fingerprint_command = "get_logged_in_fingerprint";
export declare type get_logged_in_fingerprint_command = typeof get_logged_in_fingerprint_command;
export declare type TGetLoggedInFingerprintResponse = {
    fingerprint: Optional<int>;
};
export declare function get_logged_in_fingerprint(agent: TRPCAgent): Promise<TGetLoggedInFingerprintResponse | import("../../../rpc").ErrorResponse>;
export declare const get_public_keys_command = "get_public_keys";
export declare type get_public_keys_command = typeof get_public_keys_command;
export declare type TGetPublicKeysRequest = {};
export declare type TGetPublicKeysResponse = {
    public_key_fingerprints: int[];
} | {
    keyring_is_locked: True;
};
export declare function get_public_keys(agent: TRPCAgent): Promise<TGetPublicKeysResponse | import("../../../rpc").ErrorResponse>;
export declare const get_private_key_command = "get_private_key";
export declare type get_private_key_command = typeof get_private_key_command;
export declare type TGetPrivateKeyRequest = {
    fingerprint: int;
};
export declare type TGetPrivateKeyResponse = {
    private_key: {
        fingerprint: int;
        sk: str;
        pk: str;
        farmer_pk: str;
        pool_pk: str;
        seed: Optional<str>;
    };
} | {
    success: False;
    private_key: {
        fingerprint: int;
    };
};
export declare function get_private_key(agent: TRPCAgent, data: TGetPrivateKeyRequest): Promise<TGetPrivateKeyResponse | import("../../../rpc").ErrorResponse>;
export declare const generate_mnemonic_command = "generate_mnemonic";
export declare type generate_mnemonic_command = typeof generate_mnemonic_command;
export declare type TGenerateMnemonicRequest = {};
export declare type TGenerateMnemonicResponse = {
    mnemonic: str[];
};
export declare function generate_mnemonic(agent: TRPCAgent): Promise<TGenerateMnemonicResponse | import("../../../rpc").ErrorResponse>;
export declare const add_key_command = "add_key";
export declare type add_key_command = typeof add_key_command;
export declare type TAddKeyRequest = {
    mnemonic: str[];
};
export declare type TAddKeyResponse = {
    success: false;
    error: str;
    word?: unknown;
} | {
    fingerprint: int;
};
export declare function add_key(agent: TRPCAgent, data: TAddKeyRequest): Promise<TAddKeyResponse | import("../../../rpc").ErrorResponse>;
export declare const delete_key_command = "delete_key";
export declare type delete_key_command = typeof delete_key_command;
export declare type TDeleteKeyRequest = {
    fingerprint: int;
};
export declare type TDeleteKeyResponse = {};
export declare function delete_key(agent: TRPCAgent, data: TDeleteKeyRequest): Promise<TDeleteKeyResponse | import("../../../rpc").ErrorResponse>;
export declare const check_delete_key_command = "check_delete_key";
export declare type check_delete_key_command = typeof check_delete_key_command;
export declare type TCheckDeleteKeyRequest = {
    fingerprint: int;
    max_ph_to_search?: int;
};
export declare type TCheckDeleteKeyResponse = {
    fingerprint: int;
    used_for_farmer_rewards: bool;
    used_for_pool_rewards: bool;
    wallet_balance: bool;
};
export declare function check_delete_key(agent: TRPCAgent, data: TCheckDeleteKeyRequest): Promise<import("../../../rpc").ErrorResponse | TCheckDeleteKeyResponse>;
export declare const delete_all_keys_command = "delete_all_keys";
export declare type delete_all_keys_command = typeof delete_all_keys_command;
export declare type TDeleteAllKeysRequest = {};
export declare type TDeleteAllKeysResponse = {} | {
    success: False;
    error: str;
};
export declare function delete_all_keys(agent: TRPCAgent): Promise<TDeleteAllKeysResponse | import("../../../rpc").ErrorResponse>;
export declare const get_sync_status_command = "get_sync_status";
export declare type get_sync_status_command = typeof get_sync_status_command;
export declare type TGetSyncStatusRequest = {};
export declare type TGetSyncStatusResponse = {
    synced: bool;
    syncing: bool;
    genesis_initialized: bool;
};
export declare function get_sync_status(agent: TRPCAgent): Promise<TGetSyncStatusResponse | import("../../../rpc").ErrorResponse>;
export declare const get_height_info_command = "get_height_info";
export declare type get_height_info_command = typeof get_height_info_command;
export declare type TGetHeightInfoRequest = {};
export declare type TGetHeightInfoResponse = {
    height: uint32;
};
export declare function get_height_info(agent: TRPCAgent): Promise<TGetHeightInfoResponse | import("../../../rpc").ErrorResponse>;
export declare const push_tx_command = "push_tx";
export declare type push_tx_command = typeof push_tx_command;
export declare type TPushTxRequest = {
    spend_bundle: str;
};
export declare type TPushTxResponse = {};
export declare function push_tx(agent: TRPCAgent, data: TPushTxRequest): Promise<TPushTxResponse | import("../../../rpc").ErrorResponse>;
export declare const push_transactions_command = "push_transactions";
export declare type push_transactions_command = typeof push_transactions_command;
export declare type TPushTransactionsRequest = {
    transactions: str;
};
export declare type TPushTransactionsResponse = {};
export declare function push_transactions(agent: TRPCAgent, data: TPushTransactionsRequest): Promise<TPushTransactionsResponse | import("../../../rpc").ErrorResponse>;
export declare const farm_block_command = "farm_block";
export declare type farm_block_command = typeof farm_block_command;
export declare type TFarmBlockRequest = {
    address: str;
};
export declare type TFarmBlockResponse = {};
export declare function farm_block(agent: TRPCAgent, data: TFarmBlockRequest): Promise<TFarmBlockResponse | import("../../../rpc").ErrorResponse>;
export declare const get_initial_freeze_period_command_of_wallet = "get_initial_freeze_period";
export declare type get_initial_freeze_period_command_of_wallet = typeof get_initial_freeze_period_command_of_wallet;
export declare type TGetInitialFreezePeriodRequestOfWallet = {};
export declare type TGetInitialFreezePeriodResponseOfWallet = {
    INITIAL_FREEZE_END_TIMESTAMP: 1620061200;
};
export declare function get_initial_freeze_period_of_wallet(agent: TRPCAgent): Promise<TGetInitialFreezePeriodResponseOfWallet | import("../../../rpc").ErrorResponse>;
export declare const get_network_info_command_of_wallet = "get_network_info";
export declare type get_network_info_command_of_wallet = typeof get_network_info_command_of_wallet;
export declare type TGetNetworkInfoRequestOfWallet = {};
export declare type TGetNetworkInfoResponseOfWallet = {
    network_name: str;
    network_prefix: str;
};
export declare function get_network_info_of_wallet(agent: TRPCAgent): Promise<TGetNetworkInfoResponseOfWallet | import("../../../rpc").ErrorResponse>;
export declare const get_wallets_command = "get_wallets";
export declare type get_wallets_command = typeof get_wallets_command;
export declare type TGetWalletsRequest = {
    type?: int;
    include_data?: bool;
};
export declare type TGetWalletsResponse = {
    wallets: WalletInfo[];
    fingerprint?: int;
};
export declare function get_wallets(agent: TRPCAgent, data: TGetWalletsRequest): Promise<TGetWalletsResponse | import("../../../rpc").ErrorResponse>;
export declare type TCreate_New_CAT_WalletRequest = {
    fee?: uint64;
    wallet_type: "cat_wallet";
    mode: "new";
    amount: uint64;
} | {
    fee?: uint64;
    wallet_type: "cat_wallet";
    mode: "existing";
    asset_id: str;
};
export declare type TCreate_New_CAT_WalletResponse = {
    type: uint8;
    asset_id: str;
    wallet_id: uint32;
};
export declare type TCreate_New_RL_WalletRequest = {
    fee?: uint64;
    wallet_type: "rl_wallet";
    rl_type: "admin";
    interval: int;
    limit: int;
    pubkey: str;
    amount: int;
} | {
    fee?: uint64;
    wallet_type: "rl_wallet";
    rl_type: "user";
};
export declare type TCreate_New_RL_WalletResponse = {
    success: bool;
    id: uint32;
    type: uint8;
    origin: Optional<Coin>;
    pubkey: str;
} | {
    id: uint32;
    type: uint8;
    pubkey: str;
};
export declare type TCreate_New_DID_WalletRequest = {
    fee?: uint64;
    wallet_type: "did_wallet";
    did_type: "new";
    backup_dids: str[];
    num_of_backup_ids_needed: uint64;
    amount: int;
    metadata?: Record<str, str>;
    wallet_name?: str;
} | {
    fee?: uint64;
    wallet_type: "did_wallet";
    did_type: "recovery";
    backup_data: str;
};
export declare type TCreate_New_DID_WalletResponse = {
    success: True;
    type: uint8;
    my_did: str;
    wallet_id: uint32;
} | {
    success: True;
    type: uint8;
    my_did: str;
    wallet_id: uint32;
    coin_name: str;
    coin_list: [bytes32, bytes32, uint64];
    newpuzhash: str;
    pubkey: str;
    backup_dids: bytes[];
    num_verifications_required: uint64;
};
export declare type TCreate_New_NFT_WalletRequest = {
    fee?: uint64;
    wallet_type: "nft_wallet";
    did_id?: str;
    name?: str;
};
export declare type TCreate_New_NFT_WalletResponse = {
    success: True;
    type: uint8;
    wallet_id: uint32;
};
export declare type TCreate_New_Pool_WalletRequest = {
    fee?: uint64;
    wallet_type: "pool_wallet";
    mode: "new";
    initial_target_state: {
        state: "SELF_POOLING";
    } | {
        state: "FARMING_TO_POOL";
        target_puzzle_hash: str;
        pool_url: str;
        relative_lock_height: uint32;
    };
    p2_singleton_delayed_ph?: str;
    p2_singleton_delay_time?: uint64;
} | {
    fee?: uint64;
    wallet_type: "pool_wallet";
    mode: "recovery";
};
export declare type TCreate_New_Pool_WalletResponse = {
    total_fee: uint64;
    transaction: TransactionRecord;
    launcher_id: str;
    p2_singleton_puzzle_hash: str;
};
export declare type TCreateWalletErrorResponse = {
    success: False;
    error: str;
};
export declare const create_new_wallet_command = "create_new_wallet";
export declare type create_new_wallet_command = typeof create_new_wallet_command;
export declare type TCreateNewWalletRequest = TCreate_New_CAT_WalletRequest | TCreate_New_RL_WalletRequest | TCreate_New_DID_WalletRequest | TCreate_New_NFT_WalletRequest | TCreate_New_Pool_WalletRequest;
export declare type TCreateNewWalletResponse = TCreate_New_CAT_WalletResponse | TCreate_New_RL_WalletResponse | TCreate_New_DID_WalletResponse | TCreate_New_NFT_WalletResponse | TCreate_New_Pool_WalletResponse | TCreateWalletErrorResponse;
export declare function create_new_wallet(agent: TRPCAgent, data: TCreateNewWalletRequest): Promise<TCreateNewWalletResponse | import("../../../rpc").ErrorResponse>;
export declare const get_wallet_balance_command = "get_wallet_balance";
export declare type get_wallet_balance_command = typeof get_wallet_balance_command;
export declare type TGetWalletBalanceRequest = {
    wallet_id: int;
};
export declare type TGetWalletBalanceResponse = {
    wallet_balance: {
        wallet_id: uint32;
        confirmed_wallet_balance: uint128;
        unconfirmed_wallet_balance: uint128;
        spendable_balance: uint128;
        pending_change: uint64;
        max_send_amount: uint64;
        unspent_coin_count: int;
        pending_coin_removal_count: int;
        wallet_type: int;
        fingerprint?: int;
        asset_id?: str;
    };
};
export declare function get_wallet_balance(agent: TRPCAgent, data: TGetWalletBalanceRequest): Promise<TGetWalletBalanceResponse | import("../../../rpc").ErrorResponse>;
export declare const get_transaction_command = "get_transaction";
export declare type get_transaction_command = typeof get_transaction_command;
export declare type TGetTransactionRequest = {
    transaction_id: str;
};
export declare type TGetTransactionResponse = {
    transaction: TransactionRecordConvenience;
    transaction_id: TransactionRecord["name"];
};
export declare function get_transaction(agent: TRPCAgent, data: TGetTransactionRequest): Promise<TGetTransactionResponse | import("../../../rpc").ErrorResponse>;
export declare const get_transactions_command = "get_transactions";
export declare type get_transactions_command = typeof get_transactions_command;
export declare type TGetTransactionsRequest = {
    wallet_id: int;
    start?: int;
    end?: int;
    sort_key?: str;
    reverse?: bool;
    to_address?: str;
};
export declare type TGetTransactionsResponse = {
    transactions: TransactionRecordConvenience[];
    wallet_id: int;
};
export declare function get_transactions(agent: TRPCAgent, data: TGetTransactionsRequest): Promise<TGetTransactionsResponse | import("../../../rpc").ErrorResponse>;
export declare const get_next_address_command = "get_next_address";
export declare type get_next_address_command = typeof get_next_address_command;
export declare type TGetNextAddressRequest = {
    new_address: bool;
    wallet_id: int;
};
export declare type TGetNextAddressResponse = {
    wallet_id: uint32;
    address: str;
};
export declare function get_next_address(agent: TRPCAgent, data: TGetNextAddressRequest): Promise<TGetNextAddressResponse | import("../../../rpc").ErrorResponse>;
export declare const send_transaction_command = "send_transaction";
export declare type send_transaction_command = typeof send_transaction_command;
export declare type TSendTransactionRequest = {
    wallet_id: uint32;
    amount: int;
    fee: int;
    address: str;
    memos?: str[];
    min_coin_amount?: uint64;
};
export declare type TSendTransactionResponse = {
    transaction: TransactionRecordConvenience;
    transaction_id: TransactionRecord["name"];
};
export declare function send_transaction(agent: TRPCAgent, data: TSendTransactionRequest): Promise<TSendTransactionResponse | import("../../../rpc").ErrorResponse>;
export declare const send_transaction_multi_command = "send_transaction_multi";
export declare type send_transaction_multi_command = typeof send_transaction_multi_command;
export declare type TSendTransactionMultiRequest = {
    wallet_id: uint32;
    additions: TAdditions[];
    fee?: uint64;
    coins?: Coin[];
    coin_announcements?: TCoinAnnouncement[];
    puzzle_announcements?: TPuzzleAnnouncement[];
};
export declare type TSendTransactionMultiResponse = {
    transaction: TransactionRecordConvenience;
    transaction_id: TransactionRecordConvenience["name"];
};
export declare function send_transaction_multi(agent: TRPCAgent, data: TSendTransactionMultiRequest): Promise<TSendTransactionMultiResponse | import("../../../rpc").ErrorResponse>;
export declare const get_transaction_count_command = "get_transaction_count";
export declare type get_transaction_count_command = typeof get_transaction_count_command;
export declare type TGetTransactionCountRequest = {
    wallet_id: int;
};
export declare type TGetTransactionCountResponse = {
    count: int;
    wallet_id: int;
};
export declare function get_transaction_count(agent: TRPCAgent, data: TGetTransactionCountRequest): Promise<TGetTransactionCountResponse | import("../../../rpc").ErrorResponse>;
export declare const get_farmed_amount_command = "get_farmed_amount";
export declare type get_farmed_amount_command = typeof get_farmed_amount_command;
export declare type TGetFarmedAmountRequest = {};
export declare type TGetFarmedAmountResponse = {
    farmed_amount: int;
    pool_reward_amount: int;
    farmer_reward_amount: int;
    fee_amount: int;
    last_height_farmed: int;
};
export declare function get_farmed_amount(agent: TRPCAgent): Promise<TGetFarmedAmountResponse | import("../../../rpc").ErrorResponse>;
export declare type TAdditions = {
    amount: uint64;
    puzzle_hash: str;
    memos?: str[];
};
export declare type TCoinAnnouncement = {
    coin_id: str;
    message: str;
    morph_bytes?: str;
};
export declare type TPuzzleAnnouncement = {
    puzzle_hash: str;
    message: str;
    morph_bytes?: str;
};
export declare const create_signed_transaction_command = "create_signed_transaction";
export declare type create_signed_transaction_command = typeof create_signed_transaction_command;
export declare type TCreateSignedTransactionRequest = {
    wallet_id?: uint32;
    additions: TAdditions[];
    fee?: uint64;
    min_coin_amount?: uint64;
    coins?: Coin[];
    exclude_coins?: Coin[];
    coin_announcements?: TCoinAnnouncement[];
    puzzle_announcements?: TPuzzleAnnouncement[];
};
export declare type TCreateSignedTransactionResponse = {
    signed_txs: TransactionRecordConvenience[];
    signed_tx: TransactionRecordConvenience;
};
export declare function create_signed_transaction(agent: TRPCAgent, data: TCreateSignedTransactionRequest): Promise<TCreateSignedTransactionResponse | import("../../../rpc").ErrorResponse>;
export declare const delete_unconfirmed_transactions_command = "delete_unconfirmed_transactions";
export declare type delete_unconfirmed_transactions_command = typeof delete_unconfirmed_transactions_command;
export declare type TDeleteUnconfirmedTransactionsRequest = {
    wallet_id: uint32;
};
export declare type TDeleteUnconfirmedTransactionsResponse = {};
export declare function delete_unconfirmed_transactions(agent: TRPCAgent, data: TDeleteUnconfirmedTransactionsRequest): Promise<TDeleteUnconfirmedTransactionsResponse | import("../../../rpc").ErrorResponse>;
export declare const select_coins_command = "select_coins";
export declare type select_coins_command = typeof select_coins_command;
export declare type TSelectCoinsRequest = {
    amount: uint64;
    wallet_id: uint32;
    min_coin_amount?: uint64;
    excluded_coins?: Coin[];
};
export declare type TSelectCoinsResponse = {
    coins: Coin[];
};
export declare function select_coins(agent: TRPCAgent, data: TSelectCoinsRequest): Promise<TSelectCoinsResponse | import("../../../rpc").ErrorResponse>;
export declare const get_current_derivation_index_command = "get_current_derivation_index";
export declare type get_current_derivation_index_command = typeof get_current_derivation_index_command;
export declare type TGetCurrentDerivationIndexResponse = {
    success: True;
    index: Optional<uint32>;
};
export declare function get_current_derivation_index(agent: TRPCAgent): Promise<TGetCurrentDerivationIndexResponse | import("../../../rpc").ErrorResponse>;
export declare const extend_derivation_index_command = "extend_derivation_index";
export declare type extend_derivation_index_command = typeof extend_derivation_index_command;
export declare type TExtendDerivationIndexRequest = {
    index: uint32;
};
export declare type TExtendDerivationIndexResponse = {
    success: True;
    index: Optional<uint32>;
};
export declare function extend_derivation_index(agent: TRPCAgent, data: TExtendDerivationIndexRequest): Promise<TExtendDerivationIndexResponse | import("../../../rpc").ErrorResponse>;
export declare const get_notifications_command = "get_notifications";
export declare type get_notifications_command = typeof get_notifications_command;
export declare type TGetNotificationsRequest = {
    ids?: str[];
    start?: int;
    end?: int;
};
export declare type TGetNotificationsResponse = {
    notifications: Array<{
        id: str;
        message: str;
        amount: uint64;
    }>;
};
export declare function get_notifications(agent: TRPCAgent, data: TGetNotificationsRequest): Promise<TGetNotificationsResponse | import("../../../rpc").ErrorResponse>;
export declare const delete_notifications_command = "delete_notifications";
export declare type delete_notifications_command = typeof delete_notifications_command;
export declare type TDeleteNotificationsRequest = {
    ids?: str[];
};
export declare type TDeleteNotificationsResponse = {};
export declare function delete_notifications(agent: TRPCAgent, data: TDeleteNotificationsRequest): Promise<TDeleteNotificationsResponse | import("../../../rpc").ErrorResponse>;
export declare const send_notification_command = "send_notification";
export declare type send_notification_command = typeof send_notification_command;
export declare type TSendNotificationRequest = {
    target: str;
    message: str;
    amount: uint64;
    fee?: uint64;
};
export declare type TSendNotificationResponse = {
    tx: TransactionRecordConvenience;
};
export declare function send_notification(agent: TRPCAgent, data: TSendNotificationRequest): Promise<TSendNotificationResponse | import("../../../rpc").ErrorResponse>;
export declare const sign_message_by_address_command = "sign_message_by_address";
export declare type sign_message_by_address_command = typeof sign_message_by_address_command;
export declare type TSignMessageByAddressRequest = {
    address: str;
    message: str;
};
export declare type TSignMessageByAddressResponse = {
    success: True;
    pubkey: str;
    signature: str;
};
export declare function sign_message_by_address(agent: TRPCAgent, data: TSignMessageByAddressRequest): Promise<TSignMessageByAddressResponse | import("../../../rpc").ErrorResponse>;
export declare const sign_message_by_id_command = "sign_message_by_id";
export declare type sign_message_by_id_command = typeof sign_message_by_id_command;
export declare type TSignMessageByIdRequest = {
    id: str;
    message: str;
};
export declare type TSignMessageByIdResponse = {
    success: False;
    error: str;
} | {
    success: True;
    pubkey: str;
    signature: str;
};
export declare function sign_message_by_id(agent: TRPCAgent, data: TSignMessageByIdRequest): Promise<TSignMessageByIdResponse | import("../../../rpc").ErrorResponse>;
export declare const get_cat_list_command = "get_cat_list";
export declare type get_cat_list_command = typeof get_cat_list_command;
export declare type TGetCatListResponse = {
    cat_list: CAT[];
};
export declare function get_cat_list(agent: TRPCAgent): Promise<TGetCatListResponse | import("../../../rpc").ErrorResponse>;
export declare const cat_set_name_command = "cat_set_name";
export declare type cat_set_name_command = typeof cat_set_name_command;
export declare type TCatSetNameRequest = {
    wallet_id: uint32;
    name: str;
};
export declare type TCatSetNameResponse = {
    wallet_id: uint32;
};
export declare function cat_set_name(agent: TRPCAgent, data: TCatSetNameRequest): Promise<TCatSetNameResponse | import("../../../rpc").ErrorResponse>;
export declare const cat_asset_id_to_name_command = "cat_asset_id_to_name";
export declare type cat_asset_id_to_name_command = typeof cat_asset_id_to_name_command;
export declare type TCatAssetIdToNameRequest = {
    asset_id: str;
};
export declare type TCatAssetIdToNameResponse = {
    wallet_id: Optional<uint32>;
    name: str;
};
export declare function cat_asset_id_to_name(agent: TRPCAgent, data: TCatAssetIdToNameRequest): Promise<TCatAssetIdToNameResponse | import("../../../rpc").ErrorResponse>;
export declare const cat_get_name_command = "cat_get_name";
export declare type cat_get_name_command = typeof cat_get_name_command;
export declare type TCatGetNameRequest = {
    wallet_id: uint32;
};
export declare type TCatGetNameResponse = {
    wallet_id: uint32;
    name: str;
};
export declare function cat_get_name(agent: TRPCAgent, data: TCatGetNameRequest): Promise<TCatGetNameResponse | import("../../../rpc").ErrorResponse>;
export declare const get_stray_cats_command = "get_stray_cats";
export declare type get_stray_cats_command = typeof get_stray_cats_command;
export declare type TGetStrayCatsResponse = {
    stray_cats: Array<{
        asset_id: str;
        name: str;
        first_seen_height: int;
        sender_puzzle_hash: str;
    }>;
};
export declare function get_stray_cats(agent: TRPCAgent): Promise<TGetStrayCatsResponse | import("../../../rpc").ErrorResponse>;
export declare const cat_spend_command = "cat_spend";
export declare type cat_spend_command = typeof cat_spend_command;
export declare type TCatSpendRequest = {
    wallet_id: uint32;
    inner_address: str;
    memos?: str[];
    amount: uint64;
    fee: uint64;
    min_coin_amount?: uint64;
};
export declare type TCatSpendResponse = {
    transaction: TransactionRecordConvenience;
    transaction_id: TransactionRecord["name"];
};
export declare function cat_spend(agent: TRPCAgent, data: TCatSpendRequest): Promise<TCatSpendResponse | import("../../../rpc").ErrorResponse>;
export declare const cat_get_asset_id_command = "cat_get_asset_id";
export declare type cat_get_asset_id_command = typeof cat_get_asset_id_command;
export declare type TCatGetAssetIdRequest = {
    wallet_id: uint32;
};
export declare type TCatGetAssetIdResponse = {
    asset_id: str;
    wallet_id: uint32;
};
export declare function cat_get_asset_id(agent: TRPCAgent, data: TCatGetAssetIdRequest): Promise<TCatGetAssetIdResponse | import("../../../rpc").ErrorResponse>;
export declare const create_offer_for_ids_command = "create_offer_for_ids";
export declare type create_offer_for_ids_command = typeof create_offer_for_ids_command;
export declare type TCreateOfferForIdsRequest = {
    offer: Record<int, int>;
    fee?: uint64;
    validate_only?: bool;
    driver_dict?: TDriverDict;
    min_coin_amount?: uint64;
};
export declare type TCreateOfferForIdsResponse = {
    offer: str;
    trade_record: TradeRecordConvenience;
};
export declare function create_offer_for_ids(agent: TRPCAgent, data: TCreateOfferForIdsRequest): Promise<TCreateOfferForIdsResponse | import("../../../rpc").ErrorResponse>;
export declare const get_offer_summary_command = "get_offer_summary";
export declare type get_offer_summary_command = typeof get_offer_summary_command;
export declare type TGetOfferSummaryRequest = {
    offer: str;
    advanced?: bool;
};
export declare type TGetOfferSummaryResponse = {
    summary: {
        offered: Record<str, int>;
        requested: Record<str, int>;
        fees: int;
        infos: TDriverDict;
    };
};
export declare function get_offer_summary(agent: TRPCAgent, data: TGetOfferSummaryRequest): Promise<TGetOfferSummaryResponse | import("../../../rpc").ErrorResponse>;
export declare const check_offer_validity_command = "check_offer_validity";
export declare type check_offer_validity_command = typeof check_offer_validity_command;
export declare type TCheckOfferValidityRequest = {
    offer: str;
};
export declare type TCheckOfferValidityResponse = {
    valid: bool;
};
export declare function check_offer_validity(agent: TRPCAgent, data: TCheckOfferValidityRequest): Promise<TCheckOfferValidityResponse | import("../../../rpc").ErrorResponse>;
export declare const take_offer_command = "take_offer";
export declare type take_offer_command = typeof take_offer_command;
export declare type TTakeOfferRequest = {
    offer: str;
    fee?: uint64;
    min_coin_amount?: uint64;
    solver?: Record<str, any>;
};
export declare type TTakeOfferResponse = {
    trade_record: TradeRecordConvenience;
};
export declare function take_offer(agent: TRPCAgent, data: TTakeOfferRequest): Promise<TTakeOfferResponse | import("../../../rpc").ErrorResponse>;
export declare const get_offer_command = "get_offer";
export declare type get_offer_command = typeof get_offer_command;
export declare type TGetOfferRequest = {
    trade_id: str;
    file_contents?: bool;
};
export declare type TGetOfferResponse = {
    trade_record: TradeRecordConvenience;
    offer: Optional<str>;
};
export declare function get_offer(agent: TRPCAgent, data: TGetOfferRequest): Promise<TGetOfferResponse | import("../../../rpc").ErrorResponse>;
export declare const get_all_offers_command = "get_all_offers";
export declare type get_all_offers_command = typeof get_all_offers_command;
export declare type TGetAllOffersRequest = {
    start?: int;
    end?: int;
    exclude_my_offers?: bool;
    exclude_taken_offers?: bool;
    include_completed?: bool;
    sort_key?: str;
    reverse?: bool;
    file_contents?: bool;
};
export declare type TGetAllOffersResponse = {
    trade_records: TradeRecordConvenience[];
    offers: Optional<str[]>;
};
export declare function get_all_offers(agent: TRPCAgent, data: TGetAllOffersRequest): Promise<TGetAllOffersResponse | import("../../../rpc").ErrorResponse>;
export declare const get_offers_count_command = "get_offers_count";
export declare type get_offers_count_command = typeof get_offers_count_command;
export declare type TGetOffersCountResponse = {
    total: int;
    my_offers_count: int;
    taken_offers_count: int;
};
export declare function get_offers_count(agent: TRPCAgent): Promise<TGetOffersCountResponse | import("../../../rpc").ErrorResponse>;
export declare const cancel_offer_command = "cancel_offer";
export declare type cancel_offer_command = typeof cancel_offer_command;
export declare type TCancelOfferRequest = {
    secure: bool;
    trade_id: str;
    fee?: uint64;
};
export declare type TCancelOfferResponse = {};
export declare function cancel_offer(agent: TRPCAgent, data: TCancelOfferRequest): Promise<TCancelOfferResponse | import("../../../rpc").ErrorResponse>;
export declare const cancel_offers_command = "cancel_offers";
export declare type cancel_offers_command = typeof cancel_offers_command;
export declare type TCancelOffersRequest = {
    secure: bool;
    batch_fee?: uint64;
    batch_size?: int;
    cancel_all?: bool;
    asset_id?: str;
};
export declare type TCancelOffersResponse = {
    success: True;
};
export declare function cancel_offers(agent: TRPCAgent, data: TCancelOffersRequest): Promise<TCancelOffersResponse | import("../../../rpc").ErrorResponse>;
export declare const did_set_wallet_name_command = "did_set_wallet_name";
export declare type did_set_wallet_name_command = typeof did_set_wallet_name_command;
export declare type TDidSetWalletNameRequest = {
    wallet_id: uint32;
    name: str;
};
export declare type TDidSetWalletNameResponse = {
    success: True;
    wallet_id: uint32;
} | {
    success: False;
    error: str;
};
export declare function did_set_wallet_name(agent: TRPCAgent, data: TDidSetWalletNameRequest): Promise<TDidSetWalletNameResponse | import("../../../rpc").ErrorResponse>;
export declare const did_get_wallet_name_command = "did_get_wallet_name";
export declare type did_get_wallet_name_command = typeof did_get_wallet_name_command;
export declare type TDidGetWalletNameRequest = {
    wallet_id: uint32;
};
export declare type TDidGetWalletNameResponse = {
    success: True;
    wallet_id: uint32;
    name: str;
};
export declare function did_get_wallet_name(agent: TRPCAgent, data: TDidGetWalletNameRequest): Promise<TDidGetWalletNameResponse | import("../../../rpc").ErrorResponse>;
export declare const did_update_recovery_ids_command = "did_update_recovery_ids";
export declare type did_update_recovery_ids_command = typeof did_update_recovery_ids_command;
export declare type TDidUpdateRecoveryIdsRequest = {
    wallet_id: uint32;
    new_list: str[];
    num_verifications_required?: uint64;
};
export declare type TDidUpdateRecoveryIdsResponse = {
    success: bool;
};
export declare function did_update_recovery_ids(agent: TRPCAgent, data: TDidUpdateRecoveryIdsRequest): Promise<TDidUpdateRecoveryIdsResponse | import("../../../rpc").ErrorResponse>;
export declare const did_update_metadata_command = "did_update_metadata";
export declare type did_update_metadata_command = typeof did_update_metadata_command;
export declare type TDidUpdateMetadataRequest = {
    wallet_id: uint32;
    metadata?: Record<str, str>;
    fee?: uint64;
};
export declare type TDidUpdateMetadataResponse = {
    success: True;
    wallet_id: uint32;
    spend_bundle: SpendBundle;
} | {
    success: False;
    error: str;
};
export declare function did_update_metadata(agent: TRPCAgent, data: TDidUpdateMetadataRequest): Promise<TDidUpdateMetadataResponse | import("../../../rpc").ErrorResponse>;
export declare const did_spend_command = "did_spend";
export declare type did_spend_command = typeof did_spend_command;
export declare type TDidSpendRequest = {
    wallet_id: int;
    puzzlehash: bytes32;
};
export declare type TDidSpendResponse = {
    success: bool;
};
export declare function did_spend(agent: TRPCAgent, data: TDidSpendRequest): Promise<TDidSpendResponse | import("../../../rpc").ErrorResponse>;
export declare const did_get_pubkey_command = "did_get_pubkey";
export declare type did_get_pubkey_command = typeof did_get_pubkey_command;
export declare type TDidGetPubkeyRequest = {
    wallet_id: uint32;
};
export declare type TDidGetPubkeyResponse = {
    success: bool;
    pubkey: str;
};
export declare function did_get_pubkey(agent: TRPCAgent): Promise<TDidGetPubkeyResponse | import("../../../rpc").ErrorResponse>;
export declare const did_get_did_command = "did_get_did";
export declare type did_get_did_command = typeof did_get_did_command;
export declare type TDidGetDidRequest = {
    wallet_id: uint32;
};
export declare type TDidGetDidResponse = {
    success: bool;
    wallet_id: uint32;
    my_did: str;
    coin_id?: bytes32;
};
export declare function did_get_did(agent: TRPCAgent, data: TDidGetDidRequest): Promise<TDidGetDidResponse | import("../../../rpc").ErrorResponse>;
export declare const did_recovery_spend_command = "did_recovery_spend";
export declare type did_recovery_spend_command = typeof did_recovery_spend_command;
export declare type TDidRecoverySpendRequest = {
    wallet_id: uint32;
    attest_data: str[];
    pubkey?: str;
    puzhash?: str;
};
export declare type TDidRecoverySpendResponse = {
    success: True;
    spend_bundle: SpendBundle;
} | {
    success: False;
};
export declare function did_recovery_spend(agent: TRPCAgent, data: TDidRecoverySpendRequest): Promise<TDidRecoverySpendResponse | import("../../../rpc").ErrorResponse>;
export declare const did_get_recovery_list_command = "did_get_recovery_list";
export declare type did_get_recovery_list_command = typeof did_get_recovery_list_command;
export declare type TDidGetRecoveryListRequest = {
    wallet_id: uint32;
};
export declare type TDidGetRecoveryListResponse = {
    success: bool;
    wallet_id: uint32;
    recovery_list: str[];
    num_required: uint64;
};
export declare function did_get_recovery_list(agent: TRPCAgent, data: TDidGetRecoveryListRequest): Promise<TDidGetRecoveryListResponse | import("../../../rpc").ErrorResponse>;
export declare const did_get_metadata_command = "did_get_metadata";
export declare type did_get_metadata_command = typeof did_get_metadata_command;
export declare type TDidGetMetadataRequest = {
    wallet_id: uint32;
};
export declare type TDidGetMetadataResponse = {
    success: True;
    wallet_id: uint32;
    metadata: Record<str, str>;
};
export declare function did_get_metadata(agent: TRPCAgent, data: TDidGetMetadataRequest): Promise<TDidGetMetadataResponse | import("../../../rpc").ErrorResponse>;
export declare const did_create_attest_command = "did_create_attest";
export declare type did_create_attest_command = typeof did_create_attest_command;
export declare type TDidCreateAttestRequest = {
    wallet_id: uint32;
    coin_name: str;
    puzhash: str;
};
export declare type TDidCreateAttestResponse = {
    success: True;
    message_spend_bundle: str;
    info: [str, str, uint64];
    attest_data: str;
} | {
    success: False;
};
export declare function did_create_attest(agent: TRPCAgent, data: TDidCreateAttestRequest): Promise<TDidCreateAttestResponse | import("../../../rpc").ErrorResponse>;
export declare const did_get_information_needed_for_recovery_command = "did_get_information_needed_for_recovery";
export declare type did_get_information_needed_for_recovery_command = typeof did_get_information_needed_for_recovery_command;
export declare type TDidGetInformationNeededForRecoveryRequest = {
    wallet_id: uint32;
};
export declare type TDidGetInformationNeededForRecoveryResponse = {
    success: bool;
    wallet_id: uint32;
    my_did: str;
    coin_name: str;
    newpuzhash: Optional<bytes32>;
    pubkey: Optional<bytes>;
    backup_dids: bytes[];
};
export declare function did_get_information_needed_for_recovery(agent: TRPCAgent, data: TDidGetInformationNeededForRecoveryRequest): Promise<TDidGetInformationNeededForRecoveryResponse | import("../../../rpc").ErrorResponse>;
export declare const did_get_current_coin_info_command = "did_get_current_coin_info";
export declare type did_get_current_coin_info_command = typeof did_get_current_coin_info_command;
export declare type TDidGetCurrentCoinInfoRequest = {
    wallet_id: uint32;
};
export declare type TDidGetCurrentCoinInfoResponse = {
    success: True;
    wallet_id: uint32;
    my_did: str;
    did_parent: bytes32;
    did_innerpuz: bytes32;
    did_amount: uint64;
};
export declare function did_get_current_coin_info(agent: TRPCAgent, data: TDidGetCurrentCoinInfoRequest): Promise<TDidGetCurrentCoinInfoResponse | import("../../../rpc").ErrorResponse>;
export declare const did_create_backup_file_command = "did_create_backup_file";
export declare type did_create_backup_file_command = typeof did_create_backup_file_command;
export declare type TDidCreateBackupFileRequest = {
    wallet_id: uint32;
};
export declare type TDidCreateBackupFileResponse = {
    wallet_id: uint32;
    success: True;
    backup_data: str;
};
export declare function did_create_backup_file(agent: TRPCAgent, data: TDidCreateBackupFileRequest): Promise<TDidCreateBackupFileResponse | import("../../../rpc").ErrorResponse>;
export declare const did_transfer_did_command = "did_transfer_did";
export declare type did_transfer_did_command = typeof did_transfer_did_command;
export declare type TDidTransferDidRequest = {
    wallet_id: uint32;
    inner_address: str;
    fee?: uint64;
    with_recovery_info?: bool;
};
export declare type TDidTransferDidResponse = {
    success: True;
    transaction: TransactionRecordConvenience;
    transaction_id: bytes32;
};
export declare function did_transfer_did(agent: TRPCAgent, data: TDidTransferDidRequest): Promise<TDidTransferDidResponse | import("../../../rpc").ErrorResponse>;
export declare const nft_mint_nft_command = "nft_mint_nft";
export declare type nft_mint_nft_command = typeof nft_mint_nft_command;
export declare type TNftMintNftRequest = {
    wallet_id: uint32;
    royalty_address?: str;
    target_address?: str;
    uris: str[];
    meta_uris: str[];
    license_uris: str[];
    hash: str;
    edition_number: uint64;
    edition_total: uint64;
    meta_hash?: str;
    license_hash?: str;
    fee?: uint64;
    did_id?: str;
    royalty_percentage?: uint16;
};
export declare type TNftMintNftResponse = {
    wallet_id: uint32;
    success: True;
    spend_bundle: SpendBundle;
};
export declare function nft_mint_nft(agent: TRPCAgent, data: TNftMintNftRequest): Promise<TNftMintNftResponse | import("../../../rpc").ErrorResponse>;
export declare const nft_get_nfts_command = "nft_get_nfts";
export declare type nft_get_nfts_command = typeof nft_get_nfts_command;
export declare type TNftGetNftsRequest = {
    wallet_id?: uint32;
    start_index?: int;
    num?: int;
    ignore_size_limit?: bool;
};
export declare type TNftGetNftsResponse = {
    wallet_id: uint32;
    success: True;
    nft_list: NFTInfo[];
};
export declare function nft_get_nfts(agent: TRPCAgent, data: TNftGetNftsRequest): Promise<TNftGetNftsResponse | import("../../../rpc").ErrorResponse>;
export declare const nft_set_nft_did_command = "nft_set_nft_did";
export declare type nft_set_nft_did_command = typeof nft_set_nft_did_command;
export declare type TNftSetNftDidRequest = {
    wallet_id: uint32;
    did_id?: str;
    nft_coin_id: str;
    fee?: uint64;
};
export declare type TNftSetNftDidResponse = {
    wallet_id: uint32;
    success: True;
    spend_bundle: SpendBundle;
} | {
    success: False;
    error: str;
};
export declare function nft_set_nft_did(agent: TRPCAgent, data: TNftSetNftDidRequest): Promise<TNftSetNftDidResponse | import("../../../rpc").ErrorResponse>;
export declare const nft_get_by_did_command = "nft_get_by_did";
export declare type nft_get_by_did_command = typeof nft_get_by_did_command;
export declare type TNftGetByDidRequest = {
    did_id?: str;
};
export declare type TNftGetByDidResponse = {
    wallet_id: uint32;
    success: True;
} | {
    success: False;
    error: str;
};
export declare function nft_get_by_did(agent: TRPCAgent, data: TNftGetByDidRequest): Promise<TNftGetByDidResponse | import("../../../rpc").ErrorResponse>;
export declare const nft_get_wallet_did_command = "nft_get_wallet_did";
export declare type nft_get_wallet_did_command = typeof nft_get_wallet_did_command;
export declare type TNftGetWalletDidRequest = {
    wallet_id: uint32;
};
export declare type TNftGetWalletDidResponse = {
    did_id: Optional<str>;
    success: True;
} | {
    success: False;
    error: str;
};
export declare function nft_get_wallet_did(agent: TRPCAgent, data: TNftGetWalletDidRequest): Promise<TNftGetWalletDidResponse | import("../../../rpc").ErrorResponse>;
export declare const nft_get_wallets_with_dids_command = "nft_get_wallets_with_dids";
export declare type nft_get_wallets_with_dids_command = typeof nft_get_wallets_with_dids_command;
export declare type TNftGetWalletsWithDidsResponse = {
    success: True;
    nft_wallets: Array<{
        wallet_id: uint32;
        did_id: str;
        did_wallet_id: uint32;
    }>;
};
export declare function nft_get_wallets_with_dids(agent: TRPCAgent): Promise<TNftGetWalletsWithDidsResponse | import("../../../rpc").ErrorResponse>;
export declare const nft_set_nft_status_command = "nft_set_nft_status";
export declare type nft_set_nft_status_command = typeof nft_set_nft_status_command;
export declare type TNftSetNftStatusRequest = {
    wallet_id: uint32;
    coin_id: str;
    in_transaction: bool;
};
export declare type TNftSetNftStatusResponse = {
    success: True;
} | {
    success: False;
    error: str;
};
export declare function nft_set_nft_status(agent: TRPCAgent, data: TNftSetNftStatusRequest): Promise<TNftSetNftStatusResponse | import("../../../rpc").ErrorResponse>;
export declare const nft_transfer_nft_command = "nft_transfer_nft";
export declare type nft_transfer_nft_command = typeof nft_transfer_nft_command;
export declare type TNftTransferNftRequest = {
    wallet_id: uint32;
    target_address: str;
    nft_coin_id: str;
    fee?: uint64;
};
export declare type TNftTransferNftResponse = {
    success: True;
    wallet_id: uint32;
    spend_bundle: SpendBundle;
} | {
    success: False;
    error: str;
};
export declare function nft_transfer_nft(agent: TRPCAgent, data: TNftTransferNftRequest): Promise<TNftTransferNftResponse | import("../../../rpc").ErrorResponse>;
export declare const nft_get_info_command = "nft_get_info";
export declare type nft_get_info_command = typeof nft_get_info_command;
export declare type TNftGetInfoRequest = {
    coin_id: str;
    latest?: bool;
    ignore_size_limit?: bool;
};
export declare type TNftGetInfoResponse = {
    success: True;
    nft_info: NFTInfo;
} | {
    success: False;
    error: str;
};
export declare function nft_get_info(agent: TRPCAgent, data: TNftGetInfoRequest): Promise<TNftGetInfoResponse | import("../../../rpc").ErrorResponse>;
export declare const nft_add_uri_command = "nft_add_uri";
export declare type nft_add_uri_command = typeof nft_add_uri_command;
export declare type TNftAddUriRequest = {
    wallet_id: uint32;
    uri: str;
    key: str;
    nft_coin_id: str;
    fee?: uint64;
};
export declare type TNftAddUriResponse = {
    success: True;
    wallet_id: uint32;
    spend_bundle: SpendBundle;
};
export declare function nft_add_uri(agent: TRPCAgent, data: TNftAddUriRequest): Promise<TNftAddUriResponse | import("../../../rpc").ErrorResponse>;
export declare const nft_calculate_royalties_command = "nft_calculate_royalties";
export declare type nft_calculate_royalties_command = typeof nft_calculate_royalties_command;
export declare type TNftCalculateRoyaltiesRequest = {
    royalty_assets?: Array<{
        asset: str;
        royalty_address: str;
        royalty_percentage: uint16;
    }>;
    fungible_assets?: Array<{
        asset: str;
        amount: uint64;
    }>;
};
export declare type TNftCalculateRoyaltiesResponse = Record<str, Array<{
    asset: str;
    address: str;
    amount: uint64;
}>>;
export declare function nft_calculate_royalties(agent: TRPCAgent, data: TNftCalculateRoyaltiesRequest): Promise<TNftCalculateRoyaltiesResponse | import("../../../rpc").ErrorResponse>;
export declare const nft_mint_bulk_command = "nft_mint_bulk";
export declare type nft_mint_bulk_command = typeof nft_mint_bulk_command;
export declare type TNftMintBulkRequest = {
    wallet_id: uint32;
    royalty_address?: str;
    royalty_percentage?: uint16;
    metadata_list: Array<{
        uris: str[];
        meta_uris: str[];
        license_uris: str[];
        hash: str;
        edition_number?: uint64;
        edition_total?: uint64;
        meta_hash?: str;
        license_hash?: str;
    }>;
    target_list?: str[];
    mint_number_start?: int;
    mint_total?: int;
    xch_coins?: Coin[];
    xch_change_target?: str;
    new_innerpuzhash?: str;
    new_p2_puzhash?: str;
    did_coin?: Coin;
    did_lineage_parent?: str;
    mint_from_did?: bool;
    fee?: uint64;
};
export declare type TNftMintBulkResponse = {
    success: False;
    error: str;
} | {
    success: True;
    spend_bundle: SpendBundle;
};
export declare function nft_mint_bulk(agent: TRPCAgent, data: TNftMintBulkRequest): Promise<TNftMintBulkResponse | import("../../../rpc").ErrorResponse>;
export declare const rl_set_user_info_command = "rl_set_user_info";
export declare type rl_set_user_info_command = typeof rl_set_user_info_command;
export declare type TRlSetUserInfoRequest = {
    wallet_id: int;
    origin: {
        parent_coin_info: str;
        puzzle_hash: str;
        amount: uint64;
    };
    interval: uint64;
    limit: uint64;
    admin_pubkey: str;
};
export declare type TRlSetUserInfoResponse = {};
export declare function rl_set_user_info(agent: TRPCAgent, data: TRlSetUserInfoRequest): Promise<TRlSetUserInfoResponse | import("../../../rpc").ErrorResponse>;
export declare const send_clawback_transaction_command = "send_clawback_transaction:";
export declare type send_clawback_transaction_command = typeof send_clawback_transaction_command;
export declare type TSendClawbackTransactionRequest = {
    wallet_id: uint32;
    fee: int;
};
export declare type TSendClawbackTransactionResponse = {
    transaction: TransactionRecord;
    transaction_id: TransactionRecord["name"];
};
export declare function send_clawback_transaction(agent: TRPCAgent, data: TSendClawbackTransactionRequest): Promise<TSendClawbackTransactionResponse | import("../../../rpc").ErrorResponse>;
export declare const add_rate_limited_funds_command = "add_rate_limited_funds:";
export declare type add_rate_limited_funds_command = typeof add_rate_limited_funds_command;
export declare type TAddRateLimitedFundsRequest = {
    wallet_id: uint32;
    amount: uint64;
    fee: uint64;
};
export declare type TAddRateLimitedFundsResponse = {
    status: "SUCCESS";
};
export declare function add_rate_limited_funds(agent: TRPCAgent, data: TAddRateLimitedFundsRequest): Promise<TAddRateLimitedFundsResponse | import("../../../rpc").ErrorResponse>;
export declare const pw_join_pool_command = "pw_join_pool";
export declare type pw_join_pool_command = typeof pw_join_pool_command;
export declare type TPwJoinPoolRequest = {
    fee?: uint64;
    wallet_id: uint32;
    target_puzzlehash?: string;
    pool_url?: str;
    relative_lock_height: uint32;
};
export declare type TPwJoinPoolResponse = {
    total_fee: uint64;
    transaction: TransactionRecord;
    fee_transaction: Optional<TransactionRecord>;
} | {
    success: False;
    error: "not_initialized";
};
export declare function pw_join_pool(agent: TRPCAgent, data: TPwJoinPoolRequest): Promise<TPwJoinPoolResponse | import("../../../rpc").ErrorResponse>;
export declare const pw_self_pool_command = "pw_self_pool";
export declare type pw_self_pool_command = typeof pw_self_pool_command;
export declare type TPwSelfPoolRequest = {
    wallet_id: uint32;
    fee?: uint64;
};
export declare type TPwSelfPoolResponse = {
    total_fee: uint64;
    transaction: TransactionRecord;
    fee_transaction: Optional<TransactionRecord>;
};
export declare function pw_self_pool(agent: TRPCAgent, data: TPwSelfPoolRequest): Promise<TPwSelfPoolResponse | import("../../../rpc").ErrorResponse>;
export declare const pw_absorb_rewards_command = "pw_absorb_rewards";
export declare type pw_absorb_rewards_command = typeof pw_absorb_rewards_command;
export declare type TPwAbsorbRewardsRequest = {
    wallet_id: uint32;
    fee?: uint64;
    max_spends_in_tx?: int;
};
export declare type TPwAbsorbRewardsResponse = {
    state: PoolWalletInfo;
    transaction: TransactionRecord;
    fee_transaction: Optional<TransactionRecord>;
};
export declare function pw_absorb_rewards(agent: TRPCAgent, data: TPwAbsorbRewardsRequest): Promise<TPwAbsorbRewardsResponse | import("../../../rpc").ErrorResponse>;
export declare const pw_status_command = "pw_status";
export declare type pw_status_command = typeof pw_status_command;
export declare type TPwStatusRequest = {
    wallet_id: uint32;
};
export declare type TPwStatusResponse = {
    state: PoolWalletInfo;
    unconfirmed_transactions: TransactionRecord[];
};
export declare function pw_status(agent: TRPCAgent, data: TPwStatusRequest): Promise<TPwStatusResponse | import("../../../rpc").ErrorResponse>;
export declare const create_new_dl_command = "create_new_dl";
export declare type create_new_dl_command = typeof create_new_dl_command;
export declare type TCreateNewDlRequest = {
    root: str;
    fee?: uint64;
};
export declare type TCreateNewDlResponse = {
    success: False;
    error: str;
} | {
    success: True;
    transactions: TransactionRecordConvenience[];
    launcher_id: bytes32;
};
export declare function create_new_dl(agent: TRPCAgent, data: TCreateNewDlRequest): Promise<TCreateNewDlResponse | import("../../../rpc").ErrorResponse>;
export declare const dl_track_new_command = "dl_track_new";
export declare type dl_track_new_command = typeof dl_track_new_command;
export declare type TDlTrackNewRequest = {
    launcher_id: str;
};
export declare type TDlTrackNewResponse = {};
export declare function dl_track_new(agent: TRPCAgent, data: TDlTrackNewRequest): Promise<TDlTrackNewResponse | import("../../../rpc").ErrorResponse>;
export declare const dl_stop_tracking_command = "dl_stop_tracking";
export declare type dl_stop_tracking_command = typeof dl_stop_tracking_command;
export declare type TDlStopTrackingRequest = {
    launcher_id: str;
};
export declare type TDlStopTrackingResponse = {};
export declare function dl_stop_tracking(agent: TRPCAgent, data: TDlStopTrackingRequest): Promise<TDlStopTrackingResponse | import("../../../rpc").ErrorResponse>;
export declare const dl_latest_singleton_command = "dl_latest_singleton";
export declare type dl_latest_singleton_command = typeof dl_latest_singleton_command;
export declare type TDlLatestSingletonRequest = {
    launcher_id: str;
    only_confirmed?: bool;
};
export declare type TDlLatestSingletonResponse = {
    singleton: Optional<SingletonRecord>;
};
export declare function dl_latest_singleton(agent: TRPCAgent, data: TDlLatestSingletonRequest): Promise<TDlLatestSingletonResponse | import("../../../rpc").ErrorResponse>;
export declare const dl_singletons_by_root_command = "dl_singletons_by_root";
export declare type dl_singletons_by_root_command = typeof dl_singletons_by_root_command;
export declare type TDlSingletonsByRootRequest = {
    launcher_id: str;
    root: str;
};
export declare type TDlSingletonsByRootResponse = {
    singletons: SingletonRecord[];
};
export declare function dl_singletons_by_root(agent: TRPCAgent, data: TDlSingletonsByRootRequest): Promise<TDlSingletonsByRootResponse | import("../../../rpc").ErrorResponse>;
export declare const dl_update_root_command = "dl_update_root";
export declare type dl_update_root_command = typeof dl_update_root_command;
export declare type TDlUpdateRootRequest = {
    launcher_id: str;
    new_root: str;
    fee?: uint64;
};
export declare type TDlUpdateRootResponse = {
    tx_record: TransactionRecordConvenience;
};
export declare function dl_update_root(agent: TRPCAgent, data: TDlUpdateRootRequest): Promise<TDlUpdateRootResponse | import("../../../rpc").ErrorResponse>;
export declare const dl_update_multiple_command = "dl_update_multiple";
export declare type dl_update_multiple_command = typeof dl_update_multiple_command;
export declare type TDlUpdateMultipleRequest = {
    updates: Record<str, str>;
};
export declare type TDlUpdateMultipleResponse = {
    tx_records: TransactionRecordConvenience[];
};
export declare function dl_update_multiple(agent: TRPCAgent, data: TDlUpdateMultipleRequest): Promise<TDlUpdateMultipleResponse | import("../../../rpc").ErrorResponse>;
export declare const dl_history_command = "dl_history";
export declare type dl_history_command = typeof dl_history_command;
export declare type TDlHistoryRequest = {
    min_generation?: uint32;
    max_generation?: uint32;
    num_results?: uint32;
};
export declare type TDlHistoryResponse = {
    history: SingletonRecord[];
    count: int;
};
export declare function dl_history(agent: TRPCAgent, data: TDlHistoryRequest): Promise<TDlHistoryResponse | import("../../../rpc").ErrorResponse>;
export declare const dl_owned_singletons_command = "dl_owned_singletons";
export declare type dl_owned_singletons_command = typeof dl_owned_singletons_command;
export declare type TDlOwnedSingletonsResponse = {
    singletons: SingletonRecord[];
    count: int;
};
export declare function dl_owned_singletons(agent: TRPCAgent): Promise<TDlOwnedSingletonsResponse | import("../../../rpc").ErrorResponse>;
export declare const dl_get_mirrors_command = "dl_get_mirrors";
export declare type dl_get_mirrors_command = typeof dl_get_mirrors_command;
export declare type TDlGetMirrorsRequest = {
    launcher_id: str;
};
export declare type TDlGetMirrorsResponse = {
    mirrors: Mirror[];
};
export declare function dl_get_mirrors(agent: TRPCAgent, data: TDlGetMirrorsRequest): Promise<TDlGetMirrorsResponse | import("../../../rpc").ErrorResponse>;
export declare const dl_new_mirror_command = "dl_new_mirror";
export declare type dl_new_mirror_command = typeof dl_new_mirror_command;
export declare type TDlNewMirrorRequest = {
    launcher_id: str;
    amount: uint64;
    urls: str[];
    fee?: uint64;
};
export declare type TDlNewMirrorResponse = {
    transactions: TransactionRecordConvenience[];
};
export declare function dl_new_mirror(agent: TRPCAgent, data: TDlNewMirrorRequest): Promise<TDlNewMirrorResponse | import("../../../rpc").ErrorResponse>;
export declare const dl_delete_mirror_command = "dl_delete_mirror";
export declare type dl_delete_mirror_command = typeof dl_delete_mirror_command;
export declare type TDlDeleteMirrorRequest = {
    coin_id: str;
    fee?: uint64;
};
export declare type TDlDeleteMirrorResponse = {
    transactions: TransactionRecordConvenience[];
};
export declare function dl_delete_mirror(agent: TRPCAgent, data: TDlDeleteMirrorRequest): Promise<TDlDeleteMirrorResponse | import("../../../rpc").ErrorResponse>;
