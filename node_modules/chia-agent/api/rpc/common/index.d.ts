import { str, True, uint16 } from "../../chia/types/_python_types_";
import { TRPCAgent } from "../../../rpc/index";
import { TConnectionGeneral } from "../../types";
import { TConnectionFullNode } from "../../ws/full_node/index";
export declare const chia_common_service = "";
export declare type chia_common_service = typeof chia_common_service;
export declare const get_connections_command = "get_connections";
export declare type get_connections_command = typeof get_connections_command;
export declare type TGetConnectionsRequest = {
    node_type?: str;
};
export declare type TGetConnectionsResponse = {
    connections: TConnectionGeneral[] | TConnectionFullNode[];
};
export declare function get_connections(agent: TRPCAgent, params: TGetConnectionsRequest): Promise<TGetConnectionsResponse | import("../../../rpc/index").ErrorResponse>;
export declare const open_connection_command = "open_connection";
export declare type open_connection_command = typeof open_connection_command;
export declare type TOpenConnectionRequest = {
    host: str;
    port: uint16;
};
export declare type TOpenConnectionResponse = {};
export declare function open_connection(agent: TRPCAgent, params: TOpenConnectionRequest): Promise<TOpenConnectionResponse | import("../../../rpc/index").ErrorResponse>;
export declare const close_connection_command = "close_connection";
export declare type close_connection_command = typeof close_connection_command;
export declare type TCloseConnectionRequest = {
    node_id: str;
};
export declare type TCloseConnectionResponse = {};
export declare function close_connection(agent: TRPCAgent, params: TCloseConnectionRequest): Promise<TCloseConnectionResponse | import("../../../rpc/index").ErrorResponse>;
export declare const stop_node_command = "stop_node";
export declare type stop_node_command = typeof stop_node_command;
export declare type TStopNodeResponse = {};
export declare function stop_node(agent: TRPCAgent): Promise<TStopNodeResponse | import("../../../rpc/index").ErrorResponse>;
export declare const get_routes_command = "get_routes";
export declare type get_routes_command = typeof get_routes_command;
export declare type TGetRoutesResponse = {
    success: True;
    routes: str[];
};
export declare function get_routes(agent: TRPCAgent): Promise<TGetRoutesResponse | import("../../../rpc/index").ErrorResponse>;
export declare const healthz_command = "healthz";
export declare type healthz_command = typeof healthz_command;
export declare type THealthzResponse = {
    success: True;
};
export declare function healthz(agent: TRPCAgent): Promise<THealthzResponse | import("../../../rpc/index").ErrorResponse>;
