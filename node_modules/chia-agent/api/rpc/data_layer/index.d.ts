import { TRPCAgent } from "../../../rpc/index";
import { bool, None, Optional, str, uint64 } from "../../chia/types/_python_types_";
import { TransactionRecord } from "../../chia/wallet/transaction_record";
import { bytes32 } from "../../chia/types/blockchain_format/sized_bytes";
import { OfferMarshalled, OfferStoreMarshalled } from "../../chia/data_layer/data_layer_util";
export declare const chia_data_layer_service = "chia_data_layer";
export declare type chia_data_layer_service = typeof chia_data_layer_service;
export declare const create_data_store_command = "create_data_store";
export declare type create_data_store_command = typeof create_data_store_command;
export declare type TCreateDataStoreRequest = {
    fee?: uint64;
};
export declare type TCreateDataStoreResponse = {
    txs: TransactionRecord[];
    id: str;
};
export declare function create_data_store(agent: TRPCAgent, params: TCreateDataStoreRequest): Promise<TCreateDataStoreResponse | import("../../../rpc/index").ErrorResponse>;
export declare const get_owned_stores_command = "get_owned_stores";
export declare type get_owned_stores_command = typeof get_owned_stores_command;
export declare type TGetOwnedStoresResponse = {
    store_ids: str[];
};
export declare function get_owned_stores(agent: TRPCAgent): Promise<TGetOwnedStoresResponse | import("../../../rpc/index").ErrorResponse>;
export declare const batch_update_command = "batch_update";
export declare type batch_update_command = typeof batch_update_command;
export declare type TBatchUpdateRequest = {
    fee?: uint64;
    changelist: Array<{
        key: str;
        reference_node_hash?: str;
        side?: 0 | 1;
        value?: str;
    }>;
    id: str;
};
export declare type TBatchUpdateResponse = {
    tx_id: bytes32;
};
export declare function batch_update(agent: TRPCAgent, params: TBatchUpdateRequest): Promise<TBatchUpdateResponse | import("../../../rpc/index").ErrorResponse>;
export declare const get_value_command = "get_value";
export declare type get_value_command = typeof get_value_command;
export declare type TGetValueRequest = {
    id: str;
    key: str;
    root_hash?: str;
};
export declare type TGetValueResponse = {
    value: str | None;
};
export declare function get_value(agent: TRPCAgent, params: TGetValueRequest): Promise<TGetValueResponse | import("../../../rpc/index").ErrorResponse>;
export declare const get_keys_command = "get_keys";
export declare type get_keys_command = typeof get_keys_command;
export declare type TGetKeysRequest = {
    id: str;
    root_hash?: str;
};
export declare type TGetKeysResponse = {
    keys: str[];
};
export declare function get_keys(agent: TRPCAgent, params: TGetKeysRequest): Promise<TGetKeysResponse | import("../../../rpc/index").ErrorResponse>;
export declare const get_keys_values_command = "get_keys_values";
export declare type get_keys_values_command = typeof get_keys_values_command;
export declare type TGetKeysValuesRequest = {
    id: str;
    root_hash?: str;
};
export declare type TGetKeysValuesResponse = {
    keys_values: Array<{
        hash: str;
        key: str;
        value: str;
    }>;
};
export declare function get_keys_values(agent: TRPCAgent, params: TGetKeysValuesRequest): Promise<TGetKeysValuesResponse | import("../../../rpc/index").ErrorResponse>;
export declare const get_ancestors_command = "get_ancestors";
export declare type get_ancestors_command = typeof get_ancestors_command;
export declare type TGetAncestorsRequest = {
    id: str;
    hash: str;
};
export declare type TGetAncestorsResponse = {
    ancestors: Array<{
        hash: bytes32;
        left_hash: bytes32;
        right_hash: bytes32;
    }>;
};
export declare function get_ancestors(agent: TRPCAgent, params: TGetAncestorsRequest): Promise<TGetAncestorsResponse | import("../../../rpc/index").ErrorResponse>;
export declare const get_root_command = "get_root";
export declare type get_root_command = typeof get_root_command;
export declare type TGetRootRequest = {
    id: str;
};
export declare type TGetRootResponse = {
    hash: bytes32;
    confirmed: bool;
    timestamp: uint64;
};
export declare function get_root(agent: TRPCAgent, params: TGetRootRequest): Promise<TGetRootResponse | import("../../../rpc/index").ErrorResponse>;
export declare const get_local_root_command = "get_local_root";
export declare type get_local_root_command = typeof get_local_root_command;
export declare type TGetLocalRootRequest = {
    id: str;
};
export declare type TGetLocalRootResponse = {
    hash: bytes32 | None;
};
export declare function get_local_root(agent: TRPCAgent, params: TGetLocalRootRequest): Promise<TGetLocalRootResponse | import("../../../rpc/index").ErrorResponse>;
export declare const get_roots_command = "get_roots";
export declare type get_roots_command = typeof get_roots_command;
export declare type TGetRootsRequest = {
    ids: str[];
};
export declare type TGetRootsResponse = {
    root_hashes: Array<{
        id: bytes32;
        hash: bytes32;
        confirmed: bool;
        timestamp: uint64;
    }>;
};
export declare function get_roots(agent: TRPCAgent, params: TGetRootsRequest): Promise<TGetRootsResponse | import("../../../rpc/index").ErrorResponse>;
export declare const delete_key_command = "delete_key";
export declare type delete_key_command = typeof delete_key_command;
export declare type TDeleteKeyRequest = {
    fee?: uint64;
    key: str;
    id: str;
};
export declare type TDeleteKeyResponse = {
    tx_id: bytes32;
};
export declare function delete_key(agent: TRPCAgent, params: TDeleteKeyRequest): Promise<TDeleteKeyResponse | import("../../../rpc/index").ErrorResponse>;
export declare const insert_command = "insert";
export declare type insert_command = typeof insert_command;
export declare type TInsertRequest = {
    fee?: uint64;
    key: str;
    value: str;
    id: str;
};
export declare type TInsertResponse = {
    tx_id: bytes32;
};
export declare function insert(agent: TRPCAgent, params: TInsertRequest): Promise<TInsertResponse | import("../../../rpc/index").ErrorResponse>;
export declare const subscribe_command = "subscribe";
export declare type subscribe_command = typeof subscribe_command;
export declare type TSubscribeRequest = {
    id: str;
    urls: str[];
};
export declare type TSubscribeResponse = {};
export declare function subscribe(agent: TRPCAgent, params: TSubscribeRequest): Promise<TSubscribeResponse | import("../../../rpc/index").ErrorResponse>;
export declare const unsubscribe_command = "unsubscribe";
export declare type unsubscribe_command = typeof unsubscribe_command;
export declare type TUnsubscribeRequest = {
    id: str;
};
export declare type TUnsubscribeResponse = {};
export declare function unsubscribe(agent: TRPCAgent, params: TUnsubscribeRequest): Promise<TUnsubscribeResponse | import("../../../rpc/index").ErrorResponse>;
export declare const add_mirror_command = "add_mirror";
export declare type add_mirror_command = typeof add_mirror_command;
export declare type TAddMirrorRequest = {
    id: str;
    urls: str[];
    amount: uint64;
    fee?: uint64;
};
export declare type TAddMirrorResponse = {};
export declare function add_mirror(agent: TRPCAgent, params: TAddMirrorRequest): Promise<TAddMirrorResponse | import("../../../rpc/index").ErrorResponse>;
export declare const delete_mirror_command = "delete_mirror";
export declare type delete_mirror_command = typeof delete_mirror_command;
export declare type TDeleteMirrorRequest = {
    coin_id: str;
    fee?: uint64;
};
export declare type TDeleteMirrorResponse = {};
export declare function delete_mirror(agent: TRPCAgent, params: TDeleteMirrorRequest): Promise<TDeleteMirrorResponse | import("../../../rpc/index").ErrorResponse>;
export declare const get_mirrors_command = "get_mirrors";
export declare type get_mirrors_command = typeof get_mirrors_command;
export declare type TGetMirrorsRequest = {
    id: str;
};
export declare type TGetMirrorsResponse = {
    mirrors: Array<{
        coin_id: str;
        launcher_id: str;
        amount: uint64;
        urls: str[];
        ours: bool;
    }>;
};
export declare function get_mirrors(agent: TRPCAgent, params: TGetMirrorsRequest): Promise<TGetMirrorsResponse | import("../../../rpc/index").ErrorResponse>;
export declare const remove_subscriptions_command = "remove_subscriptions";
export declare type remove_subscriptions_command = typeof remove_subscriptions_command;
export declare type TRemoveSubscriptionsRequest = {
    id: str;
    urls: str[];
};
export declare type TRemoveSubscriptionsResponse = {};
export declare function remove_subscriptions(agent: TRPCAgent, params: TRemoveSubscriptionsRequest): Promise<TRemoveSubscriptionsResponse | import("../../../rpc/index").ErrorResponse>;
export declare const subscriptions_command = "subscriptions";
export declare type subscriptions_command = typeof subscriptions_command;
export declare type TSubscriptionsResponse = {
    store_ids: str[];
};
export declare function subscriptions(agent: TRPCAgent): Promise<TSubscriptionsResponse | import("../../../rpc/index").ErrorResponse>;
export declare const get_kv_diff_command = "get_kv_diff";
export declare type get_kv_diff_command = typeof get_kv_diff_command;
export declare type TGetKvDiffRequest = {
    id: str;
    hash_1: str;
    hash_2: str;
};
export declare type TGetKvDiffResponse = {
    diff: Array<{
        type: str;
        key: str;
        value: str;
    }>;
};
export declare function get_kv_diff(agent: TRPCAgent, params: TGetKvDiffRequest): Promise<TGetKvDiffResponse | import("../../../rpc/index").ErrorResponse>;
export declare const get_root_history_command = "get_root_history";
export declare type get_root_history_command = typeof get_root_history_command;
export declare type TGetRootHistoryRequest = {
    id: str;
};
export declare type TGetRootHistoryResponse = {
    root_history: Array<{
        root_hash: bytes32;
        confirmed: bool;
        timestamp: uint64;
    }>;
};
export declare function get_root_history(agent: TRPCAgent, params: TGetRootHistoryRequest): Promise<TGetRootHistoryResponse | import("../../../rpc/index").ErrorResponse>;
export declare const add_missing_files_command = "add_missing_files";
export declare type add_missing_files_command = typeof add_missing_files_command;
export declare type TAddMissingFilesRequest = {
    ids?: str[];
    overwrite?: bool;
    foldername?: str;
};
export declare type TAddMissingFilesResponse = {};
export declare function add_missing_files(agent: TRPCAgent, params: TAddMissingFilesRequest): Promise<TAddMissingFilesResponse | import("../../../rpc/index").ErrorResponse>;
export declare const make_offer_command = "make_offer";
export declare type make_offer_command = typeof make_offer_command;
export declare type TMakeOfferRequest = {
    fee?: uint64;
    maker: OfferStoreMarshalled;
    taker: OfferStoreMarshalled;
};
export declare type TMakeOfferResponse = {
    success: bool;
    offer: OfferMarshalled;
};
export declare function make_offer(agent: TRPCAgent, params: TMakeOfferRequest): Promise<TMakeOfferResponse | import("../../../rpc/index").ErrorResponse>;
export declare const take_offer_command = "take_offer";
export declare type take_offer_command = typeof take_offer_command;
export declare type TTakeOfferRequest = {
    fee?: uint64;
    offer: OfferMarshalled;
};
export declare type TTakeOfferResponse = {
    success: bool;
    trade_id: str;
};
export declare function take_offer(agent: TRPCAgent, params: TTakeOfferRequest): Promise<TTakeOfferResponse | import("../../../rpc/index").ErrorResponse>;
export declare const verify_offer_command = "verify_offer";
export declare type verify_offer_command = typeof verify_offer_command;
export declare type TVerifyOfferRequest = {
    fee?: uint64;
    offer: OfferMarshalled;
};
export declare type TVerifyOfferResponse = {
    success: bool;
    valid: bool;
    error: Optional<str>;
    fee: Optional<uint64>;
};
export declare function verify_offer(agent: TRPCAgent, params: TVerifyOfferRequest): Promise<TVerifyOfferResponse | import("../../../rpc/index").ErrorResponse>;
export declare const cancel_offer_command = "cancel_offer";
export declare type cancel_offer_command = typeof cancel_offer_command;
export declare type TCancelOfferRequest = {
    trade_id: str;
    secure: bool;
    fee?: uint64;
};
export declare type TCancelOfferResponse = {
    success: bool;
};
export declare function cancel_offer(agent: TRPCAgent, params: TCancelOfferRequest): Promise<TCancelOfferResponse | import("../../../rpc/index").ErrorResponse>;
