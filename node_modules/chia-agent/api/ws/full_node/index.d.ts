import { BlockRecord } from "../../chia/consensus/block_record";
import { bool, float, int, None, str, uint128, uint32, uint64, uint8 } from "../../chia/types/_python_types_";
import { TDaemon } from "../../../daemon/index";
import { GetMessageType, TConnectionGeneral } from "../../types";
import { bytes32 } from "../../chia/types/blockchain_format/sized_bytes";
import { NewSignagePoint } from "../../chia/protocols/farmer_protocol";
import { ReceiveBlockResult } from "../../chia/consensus/blockchain";
export declare const chia_full_node_service = "chia_full_node";
export declare type chia_full_node_service = typeof chia_full_node_service;
export declare type TConnectionFullNode = ({
    peak_height: uint32;
    peak_weight: uint128;
    peak_hash: bytes32;
} | {
    peak_height: None;
    peak_weight: None;
    peak_hash: None;
}) & TConnectionGeneral;
export declare const get_connections_command = "get_connections";
export declare type get_connections_command = typeof get_connections_command;
export declare type TGetConnectionsBroadCast = {
    connections: TConnectionFullNode[];
};
export declare function on_get_connections(daemon: TDaemon, callback: (e: GetMessageType<chia_full_node_service, get_connections_command, TGetConnectionsBroadCast>) => unknown): Promise<() => void>;
export declare const get_blockchain_state_command = "get_blockchain_state";
export declare type get_blockchain_state_command = typeof get_blockchain_state_command;
export declare type TGetBlockchainStateBroadCast = {
    blockchain_state: {
        peak: BlockRecord;
        genesis_challenge_initialized: bool;
        sync: {
            sync_mode: bool;
            synced: bool;
            sync_tip_height: uint32;
            sync_progress_height: uint32;
        };
        difficulty: uint64;
        sub_slot_iters: uint64;
        space: uint128;
        mempool_size: int;
        mempool_cost: int;
        "mempool_min_fees": {
            "cost_5000000": float;
        };
        "mempool_max_total_cost": int;
        "block_max_cost": int;
        "node_id": str;
    };
};
export declare function on_get_blockchain_state(daemon: TDaemon, callback: (e: GetMessageType<chia_full_node_service, get_blockchain_state_command, TGetBlockchainStateBroadCast>) => unknown): Promise<() => void>;
export declare const block_command = "block";
export declare type block_command = typeof block_command;
export declare type TBlockBroadCast = {} | {
    transaction_block: bool;
    k_size: uint8;
    header_hash: bytes32;
    height: uint32;
    block_cost?: uint64;
    block_fees?: uint64;
    timestamp?: uint64;
    transaction_generator_size_bytes?: int;
    transaction_generator_ref_list: uint32[];
    receive_block_result?: ReceiveBlockResult;
};
export declare function on_block(daemon: TDaemon, callback: (e: GetMessageType<chia_full_node_service, block_command, TBlockBroadCast>) => unknown): Promise<() => void>;
export declare const signage_point_command = "signage_point";
export declare type signage_point_command = typeof signage_point_command;
export declare type TSignagePointBroadCast = {
    broadcast_farmer: NewSignagePoint;
};
export declare function on_signage_point(daemon: TDaemon, callback: (e: GetMessageType<chia_full_node_service, signage_point_command, TSignagePointBroadCast>) => unknown): Promise<() => void>;
export declare type chia_full_node_commands = get_blockchain_state_command | get_connections_command | block_command | signage_point_command;
export declare type TChiaFullNodeBroadcast = TGetBlockchainStateBroadCast | TGetConnectionsBroadCast | TBlockBroadCast | TSignagePointBroadCast;
export declare function on_message_from_full_node(daemon: TDaemon, callback: (e: GetMessageType<chia_full_node_service, chia_full_node_commands, TChiaFullNodeBroadcast>) => unknown): Promise<() => void>;
