import { ProofOfSpace } from "../../chia/types/blockchain_format/proof_of_space";
import { DeclareProofOfSpace, NewSignagePoint } from "../../chia/protocols/farmer_protocol";
import { bytes32 } from "../../chia/types/blockchain_format/sized_bytes";
import { bool, float, str, uint32, uint64 } from "../../chia/types/_python_types_";
import { TDaemon } from "../../../daemon/index";
import { GetMessageType, TConnectionGeneral } from "../../types";
import { Receiver } from "../../chia/plot-sync/receiver";
export declare const chia_farmer_service = "chia_farmer";
export declare type chia_farmer_service = typeof chia_farmer_service;
export declare const get_connections_command = "get_connections";
export declare type get_connections_command = typeof get_connections_command;
export declare type TGetConnectionsBroadCast = {
    connections: TConnectionGeneral[];
};
export declare function on_get_connections(daemon: TDaemon, callback: (e: GetMessageType<chia_farmer_service, get_connections_command, TGetConnectionsBroadCast>) => unknown): Promise<() => void>;
export declare const new_farming_info_command = "new_farming_info";
export declare type new_farming_info_command = typeof new_farming_info_command;
export declare type TNewFarmingInfoBroadCast = {
    farming_info: {
        challenge_hash: bytes32;
        signage_point: bytes32;
        passed_filter: uint32;
        proofs: uint32;
        total_plots: uint32;
        timestamp: uint64;
    };
};
export declare function on_new_farming_info(daemon: TDaemon, callback: (e: GetMessageType<chia_farmer_service, new_farming_info_command, TNewFarmingInfoBroadCast>) => unknown): Promise<() => void>;
export declare const new_signage_point_command = "new_signage_point";
export declare type new_signage_point_command = typeof new_signage_point_command;
export declare type TNewSignagePointBroadCast = {
    proofs: ProofOfSpace[];
    signage_point: NewSignagePoint;
};
export declare function on_new_signage_point(daemon: TDaemon, callback: (e: GetMessageType<chia_farmer_service, new_signage_point_command, TNewSignagePointBroadCast>) => unknown): Promise<() => void>;
export declare const harvester_update_command = "harvester_update";
export declare type harvester_update_command = typeof harvester_update_command;
export declare type THarvesterUpdateBroadCast = Receiver<true>;
export declare function on_harvester_update(daemon: TDaemon, callback: (e: GetMessageType<chia_farmer_service, harvester_update_command, THarvesterUpdateBroadCast>) => unknown): Promise<() => void>;
export declare const harvester_removed_command = "harvester_removed";
export declare type harvester_removed_command = typeof harvester_removed_command;
export declare type THarvesterRemovedBroadCast = {
    node_id: bytes32;
};
export declare function on_harvester_removed(daemon: TDaemon, callback: (e: GetMessageType<chia_farmer_service, harvester_removed_command, THarvesterRemovedBroadCast>) => unknown): Promise<() => void>;
export declare const proof_command = "proof";
export declare type proof_command = typeof proof_command;
export declare type TProofBroadCast = {
    proof: DeclareProofOfSpace;
    passed_filter: bool;
};
export declare function on_proof(daemon: TDaemon, callback: (e: GetMessageType<chia_farmer_service, proof_command, TProofBroadCast>) => unknown): Promise<() => void>;
export declare const submitted_partial_command = "submitted_partial";
export declare type submitted_partial_command = typeof submitted_partial_command;
export declare type TSubmittedPartialBroadCast = {
    launcher_id: str;
    pool_url: str;
    current_difficulty: uint64;
    points_acknowledged_since_start: uint64;
    points_acknowledged_24h: Array<[float, uint64]>;
};
export declare function on_submitted_partial(daemon: TDaemon, callback: (e: GetMessageType<chia_farmer_service, submitted_partial_command, TSubmittedPartialBroadCast>) => unknown): Promise<() => void>;
export declare type chia_farmer_commands = get_connections_command | new_farming_info_command | new_signage_point_command | harvester_update_command | harvester_removed_command | proof_command | submitted_partial_command;
export declare type TChiaFarmerBroadcast = TGetConnectionsBroadCast | TNewFarmingInfoBroadCast | TNewSignagePointBroadCast | THarvesterUpdateBroadCast | THarvesterRemovedBroadCast | TProofBroadCast | TSubmittedPartialBroadCast;
export declare function on_message_from_farmer(daemon: TDaemon, callback: (e: GetMessageType<chia_farmer_service, chia_farmer_commands, TChiaFarmerBroadcast>) => unknown): Promise<() => void>;
