"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.on_crawl_batch_completed = exports.crawl_batch_completed_command = exports.on_loaded_initial_peers = exports.loaded_initial_peers_command = exports.chia_crawler_service = void 0;
const types_1 = require("../../types");
exports.chia_crawler_service = "chia_crawler";
exports.loaded_initial_peers_command = "loaded_initial_peers";
function on_loaded_initial_peers(daemon, callback) {
    return __awaiter(this, void 0, void 0, function* () {
        yield daemon.subscribe(types_1.metrics_service);
        const messageListener = (e) => {
            if (e.origin === exports.chia_crawler_service && e.command === exports.loaded_initial_peers_command) {
                callback(e);
            }
        };
        return daemon.addMessageListener(exports.chia_crawler_service, messageListener);
    });
}
exports.on_loaded_initial_peers = on_loaded_initial_peers;
exports.crawl_batch_completed_command = "crawl_batch_completed";
function on_crawl_batch_completed(daemon, callback) {
    return __awaiter(this, void 0, void 0, function* () {
        yield daemon.subscribe(types_1.metrics_service);
        const messageListener = (e) => {
            if (e.origin === exports.chia_crawler_service && e.command === exports.crawl_batch_completed_command) {
                callback(e);
            }
        };
        return daemon.addMessageListener(exports.chia_crawler_service, messageListener);
    });
}
exports.on_crawl_batch_completed = on_crawl_batch_completed;
