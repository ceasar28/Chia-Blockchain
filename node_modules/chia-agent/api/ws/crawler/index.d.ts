import { bytes32 } from "../../chia/types/blockchain_format/sized_bytes";
import { int, str, uint64 } from "../../chia/types/_python_types_";
import { TDaemon } from "../../../daemon/index";
import { GetMessageType } from "../../types";
export declare const chia_crawler_service = "chia_crawler";
export declare type chia_crawler_service = typeof chia_crawler_service;
export declare type TPeerCounts = {
    total_last_5_days: int;
    reliable_nodes: int;
    ipv4_last_5_days: bytes32;
    ipv6_last_5_days: uint64;
    versions: Record<str, int>;
};
export declare const loaded_initial_peers_command = "loaded_initial_peers";
export declare type loaded_initial_peers_command = typeof loaded_initial_peers_command;
export declare type TLoadedInitialPeersBroadCast = {
    peer_counts: TPeerCounts;
};
export declare function on_loaded_initial_peers(daemon: TDaemon, callback: (e: GetMessageType<chia_crawler_service, loaded_initial_peers_command, TLoadedInitialPeersBroadCast>) => unknown): Promise<() => void>;
export declare const crawl_batch_completed_command = "crawl_batch_completed";
export declare type crawl_batch_completed_command = typeof crawl_batch_completed_command;
export declare type TCrawlBatchCompletedBroadCast = {
    peer_counts: TPeerCounts;
};
export declare function on_crawl_batch_completed(daemon: TDaemon, callback: (e: GetMessageType<chia_crawler_service, crawl_batch_completed_command, TCrawlBatchCompletedBroadCast>) => unknown): Promise<() => void>;
